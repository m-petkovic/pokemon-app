{"version":3,"sources":["PokemonContext.ts","components/PokemonFilter.tsx","components/PokemonInfo.tsx","components/Pokemon.tsx","components/Table.tsx","utils/string-utils.ts","components/PokemonTable.tsx","PokemonReducer.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PokemonContext","React","createContext","PokemonFilter","useContext","filter","state","dispatch","value","onChange","e","type","payload","target","PokemonInfo","selectedPokemon","name","english","Object","keys","base","map","key","Pokemon","pokemon","onSelect","join","onClick","Table","headers","items","render","header","index","charAt","toUpperCase","slice","item","PokemonTable","pokemons","first","second","toLocaleLowerCase","includes","pokemonReducer","action","Error","App","useReducer","useEffect","fetch","then","res","json","Provider","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8c479c7c.chunk.js","sourcesContent":["import React from 'react';\n\nconst PokemonContext = React.createContext({});\n\nexport default PokemonContext;","import { useContext } from \"react\";\nimport PokemonContext from \"../PokemonContext\";\nimport { Action, State } from \"../types/reducer.types\";\n\nconst PokemonFilter = () => {\n    const { state: { filter }, dispatch } = useContext(PokemonContext) as { state: State; dispatch: React.Dispatch<Action>; };\n\n    return (\n        <input\n            value={filter}\n            onChange={e => dispatch({\n                type: 'SET_FILTER',\n                payload: e.target.value\n            })}\n        />\n    )\n};\n\nexport default PokemonFilter;","import { useContext } from \"react\";\nimport PokemonContext from \"../PokemonContext\";\nimport { PokemonBase } from \"../types/pokemon.types\";\nimport { State } from \"../types/reducer.types\";\n\nconst PokemonInfo = () => {\n    const { state: { selectedPokemon}} = useContext(PokemonContext) as { state: State };\n\n    return selectedPokemon ? (\n        <div>\n            <h1>{selectedPokemon.name.english}</h1>\n            <table>\n                <tbody>\n                    {Object.keys(selectedPokemon.base).map(key => (\n                        <tr key={key}>\n                            <td>{key}</td>\n                            <td>{selectedPokemon.base[key as keyof PokemonBase]}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    ) : null;\n};\n\nexport default PokemonInfo;","import { IPokemon } from \"../types/pokemon.types\";\n\nconst Pokemon = ({\n    pokemon,\n    onSelect\n}: {\n    pokemon: IPokemon;\n    onSelect: (pokemon: IPokemon) => void;\n}) => (\n    <>\n        <td>{pokemon.name.english}</td>\n        <td>{pokemon.type.join(\", \")}</td>\n        <td>\n            <button onClick={() => onSelect(pokemon)}>More info</button>\n        </td>\n    </>\n);\n\nexport default Pokemon;","import { ReactNode } from \"react\";\nimport { capitalize } from \"../utils/string-utils\";\n\nconst Table = <TableItem,>({\n    headers,\n    items,\n    render\n}: {\n    headers: string[];\n    items: TableItem[];\n    render: (item: TableItem) => ReactNode\n}) => (\n    <>\n        <table>\n            <thead>\n                <tr>\n                    {headers.map((header, index) => (\n                        <th key={index}>{capitalize(header)}</th>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>\n                {items.map((item, index) => (\n                    <tr key={index}>\n                        {render(item)}\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    </>\n);\n\nexport default Table;","export const capitalize = (value: string) => value.charAt(0).toUpperCase() + value.slice(1);\n\nexport const equalsIgnoreCase = (first: string, second: string) => first.toLocaleLowerCase().includes(second.toLocaleLowerCase()); ","import React, { useContext } from \"react\";\nimport PokemonContext from \"../PokemonContext\";\nimport { Action, State } from \"../types/reducer.types\";\nimport { equalsIgnoreCase } from \"../utils/string-utils\";\nimport Pokemon from \"./Pokemon\";\nimport Table from \"./Table\";\n\nconst PokemonTable = () => {\n    const { state: { filter, pokemons }, dispatch } = useContext(PokemonContext) as { state: State; dispatch: React.Dispatch<Action>; };\n\n    return (\n        <div>\n            <Table\n                headers={[\"name\", \"type\"]}\n                items={pokemons.filter(pokemon => equalsIgnoreCase(pokemon.name.english, filter)).slice(0, 20)}\n                render={pokemon => <Pokemon pokemon={pokemon} onSelect={pokemon => dispatch({\n                    type: 'SET_SELECTED_POKEMON',\n                    payload: pokemon\n                })} />}\n            />\n        </div>\n    );\n};\n\nexport default PokemonTable;","import { Action, State } from \"./types/reducer.types\";\n\nconst pokemonReducer = (state: State, action: Action): State => {\n    switch (action.type) {\n      case 'SET_FILTER':\n        return {\n          ...state,\n          filter: action.payload\n        };\n      case 'SET_POKEMONS':\n        return {\n          ...state,\n          pokemons: action.payload\n        };\n      case 'SET_SELECTED_POKEMON':\n        return {\n          ...state,\n          selectedPokemon: action.payload\n        };\n      default:\n        throw new Error(\"No action\");\n    }\n  };\n\n  export default pokemonReducer;","import { useEffect, useReducer } from 'react';\nimport './App.css';\nimport { IPokemon } from './types/pokemon.types';\nimport PokemonFilter from './components/PokemonFilter';\nimport PokemonInfo from './components/PokemonInfo';\nimport PokemonTable from './components/PokemonTable';\nimport PokemonContext from './PokemonContext';\nimport pokemonReducer from './PokemonReducer';\n\nconst App = () => {\n  const [state, dispatch] = useReducer(pokemonReducer, {\n    filter: \"\",\n    pokemons: [],\n    selectedPokemon: null\n  });\n\n  useEffect(() => {\n    fetch(\"http://localhost:3000/pokemon.json\")\n      .then(res => res.json())\n      .then((pokemons: IPokemon[]) => dispatch({\n        type: 'SET_POKEMONS',\n        payload: pokemons\n      }));\n  }, []);\n\n  if (!state.pokemons) {\n    return <div>Loading pokemons...</div>\n  }\n\n  return (\n    <PokemonContext.Provider value={{ state, dispatch }}>\n      <div className=\"main\">\n        <h1 className=\"title\">Pokemon Search</h1>\n        <PokemonFilter />\n        <div className=\"container\">\n          <PokemonTable />\n          <PokemonInfo />\n        </div>\n      </div>\n    </PokemonContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}